name: Package and Notify

on:
  push:
    branches:
      - produktiv  # Triggert nur bei Pushes auf den Branch 'produktiv'
    paths-ignore:
      - '.github/workflows/**'  # Ignoriere Workflow-Dateien
      - 'docs/**'               # Ignoriere Dokumentationsdateien
      - '*.md'                  # Ignoriere Markdown-Dateien
  pull_request:
    branches:
      - produktiv  # Triggert bei PR-Merges in den Branch 'produktiv'

jobs:
  build-and-notify:
    runs-on: ubuntu-22.04

    steps:
      # 1. Repository auschecken
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 2. Release Package vorbereiten
      - name: Prepare Release Package
        run: |
          # Erstelle ein tempor√§res Verzeichnis f√ºr das Release-Package
          mkdir release_package
          
          # Kopiere nur gew√ºnschte Dateien in das Release-Package
          rsync -av --exclude='.github/' --exclude='docs/' --exclude='*.md' ./ release_package/
          
          # Erstelle das ZIP-Archiv
          cd release_package
          zip -r ../package.zip .

      # 3. Release erstellen oder aktualisieren
      - name: Create or Update Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: "Modver√∂ffentlichung v${{ github.run_number }}"
          draft: false
          prerelease: false

      # 4. ZIP-Datei an Release anh√§ngen
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: package.zip
          asset_name: package.zip
          asset_content_type: application/zip

      # 5. Discord-Benachrichtigung mit interaktivem Button
      - name: Notify Discord with Button
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          REPO: ${{ github.repository }}
          TAG: v${{ github.run_number }}
        run: |
          PACKAGE_URL="https://github.com/${REPO}/releases/download/${TAG}/package.zip"

          # JSON-Daten f√ºr die Webhook-Nachricht mit einem interaktiven Button
          PAYLOAD=$(cat <<EOF
          {
            "content": "Ein neues Package wurde ver√∂ffentlicht! üöÄ",
            "embeds": [
              {
                "title": "Neues Release verf√ºgbar!",
                "description": "Das Release kann hier heruntergeladen werden:",
                "color": 5814783,
                "url": "https://github.com/${REPO}/releases/tag/${TAG}"
              }
            ],
            "components": [
              {
                "type": 1,
                "components": [
                  {
                    "type": 2,
                    "label": "Download Package",
                    "style": 5,
                    "url": "${PACKAGE_URL}"
                  }
                ]
              }
            ]
          }
EOF
          )

          # Webhook-Request an Discord senden
          curl -H "Content-Type: application/json" \
               -d "${PAYLOAD}" \
               "${DISCORD_WEBHOOK}"
